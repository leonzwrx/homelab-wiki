***********
Insert Mode operation not found in vimtutor and not in cheat sheets
***********
Ctrl + u delete through the begging of the line
Ctrl + o temporarily enter normal mode

***********
Normal Mode operation not in vimtutor and not in cheat sheets
***********

dt+ delete til + (or df+ to include the character)
dT+ delete backwards til + (or dF+ to include the character)
di" delete stuff inside quotes
    di< delete stuff inside <>
	di( delete stuff inside ()
ci" change (delete and enter insert mode) stuff inside quotes
    ci< change stuff inside <>
yi" yank inside quotes
    yi< yank stuff inside <>
= indent based on syntax
    =gg make indents until beginning of the file
    =G make indents until end of the file
:jump shows a list of jumps
  ctrl-o - jump back (like a back button)
  ctrl-i - jump forward (like a back button)

***********
Searching
***********

Case-insensitive search - add escape character \c anywhere in / "\ccopyright or /copyright\c or even /copyri\cght"

***********
Spelling
***********
When set spell spelllang=en_us is enabled,
    Use 'zg' to add the word under cursor to internal spellfile to mark it correct
    Use 'zw' to undo the addition 
    [s and ]s jump between misspelled words,
    :set nospell to disable spelling

Custom spell file addition located in /home/leo/.vim/spell/en.utf-8.add

***********
Retrieve another file or a command
***********
:r !sudo cat /etc/fstab | grep-i backup
:r !hostnamectl
 in : mode, ctrl-D shows list of all available commands instead of tabbing thru them
:browse oldfiles to retrieve and open recent files
***********
Comments
***********
comment with:

<ESC>
:10,100s/^/#/
(that reads, from line 10 to 100 substitute line start (^) with a # sign.)

Uncomment with

<ESC>
:10,100s/^#//

Or use Visual Mode

Ctrl-V
Highlight first element in rows you want commented
Shift-i
#
esc

Uncomment would with:

Ctrl-V
Highlight #'s
d
l (or right arrow)


***********
Tabs and windows
***********

Ctrl-w + =: Equalize the size of all windows.
Ctrl-w + <: Decrease the width of the current window.
Ctrl-w + >: Increase the width of the current window.
Ctrl-w + +: Increase the height of the current window.
Ctrl-w + -: Decrease the height of the current window.
Ctrl-w + h/j/k/l: Move to the window to the left/below/above/right.
Ctrl-w + c: Close the current window.
Ctrl-w + o: Close all windows except the current one.

***********
Help operation
***********
:h j: help on key j
:h v_d : help on d key in visual mode
:h i_d : help on d key in insert mode

***********
Settings
***********

:set foldmethod? #See what a current setting is set to use question mark
:set ic #ignore case when searching
:set hlsearch #highlight searched results.
:set incsearch #will move the highlight as you add characters to the search string.

***********
Folding
***********
set foldmethod=syntax for automatic syntax folding
If folding method is set to manual since I cannot get syntax foldmethod to work and define using 'zf'
For example, you can use zf% to fold a block of code enclosed within curly braces ({}).


Fold Commands:

my default .vimrc folding method set to marker
to unset, run set foldingmethod=manual and/or run ":%normal! zo" to open all folds throughout the file

zf{motion}: Create a fold from the current cursor position to the motion specified. For example, zf} will create a fold from the current line to the next curly brace (}).
zfa{motion}: Create a fold from the current cursor position to the next occurrence of the motion specified. For example, zfal will create a fold from the current line to the next occurrence of the letter 'l'.
zf}: Create a fold from the current line to the next curly brace (}).
zf%: Create a fold from the current cursor position to the matching closing brace (}) of the block.
zF: Create a fold from the cursor position to the end of the file.
Unfold Commands:

zo: Open (unfold) a fold at the cursor position.
zO: Open all folds at the cursor position recursively.
zc: Close (fold) a fold at the cursor position.
zC: Close all folds at the cursor position recursively.
za: Toggle the fold at the cursor position between open and closed.

Use zd to delete the fold at the cursor (no text is deleted, just the fold markers); zD is used to recursively delete folds at the cursor.
Use zE to delete ALL folds in the file

:mkview and :loadview
if you manually save folds with :mkview, you'll need to load them with :loadview each time you open the file to restore the fold settings. Automatic folding settings or session management plugins offer more convenient ways to preserve fold settings across editing sessions.

